shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
#return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"], color = 'test'))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotBayes <- function(shuffled, color = "test") {
n <- length(shuffled)
#assemble data frame
nx <- ceiling(sqrt(n) * 40 /sqrt(1000)) # length of x-axis (setup so that it's 40 when n = 1000)
ny <- ceiling(n / nx) # length of y-axis
# fill in coordinate vectors
rows <- rep(seq(1:nx), ny)
cols <- numeric()
for (i in seq(1:ny)) {
cols <- c(cols, rep(i,nx))
}
# create data frame, add NA for blank spaces
data <- data.frame(result = c(rep(NA, length(rows) - length(shuffled)), shuffled),
x = rows, y = cols)
# add truth column
data$truth = ifelse(data$result == "FN" | data$result == "TP", T, F)
# add test column
data$test = ifelse(data$result == "FP" | data$result == "TP", "Positive", "Negative")
#plot
if (color == "test") {
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
} else if (color == "truth") {
ggplot(data, aes(x=x, y=y, colour=truth)) + geom_point(aes(shape = result, size=2))
} else {
print("$$$$$$$ INVALID COLOR ARGUMENT $$$$ using 'test' $$$$$$$$$$")
ggplot(data, aes(x=x, y=y, colour=test)) + geom_point(aes(shape = result, size=2))
}
}
# Breast Cancer, Silver p. 246
# shuffled = shuffleBayesRates(TP = 0.011,
#              FP = 0.099,
#              TN = 0.887,
#              FN = 0.003,
#              n = 1523)
shuffled = shuffleBayesProbs(x = 0.014,
y = 0.7857143,
z = 0.1004057,
n = 1523)
#shuffled[shuffled=="TP" | shuffled == "FN"]
plotStats <- function(shuffled, stat = "all") {
if (stat == "all") {
plotBayes(shuffled)
} else if (stat == "precision") {
print("PRECISION:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FP"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FP"]))
} else if (stat == "recall" | stat == "sensitivity") {
print("RECALL/SENSITIVITY:")
print(length(shuffled[shuffled=="TP"]) / length(shuffled[shuffled=="TP" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TP" | shuffled == "FN"]))
} else if (stat == "specificity") {
print("SPECIFICITY:")
print(length(shuffled[shuffled=="TN"]) / length(shuffled[shuffled=="TN" | shuffled == "FN"]))
return(plotBayes(shuffled[shuffled=="TN" | shuffled == "FN"]))
} else {
print("$$$$$$$$$ INVALID STAT ARGUMENT $$$$ using 'all' $$$$$$$$$$$$")
return(plotBayes(shuffled))
}
}
plotStats(shuffled)
plotStats(shuffled, "specificity")
plotStats(shuffled, "recall")
plotStats(shuffled, "precision")
setwd("~/Documents/Trump/Analysis")
setwd("~/Documents/Trump/modelOutput/logs/")
setwd("~/Documents/Trump/modelOutput/logs")
df <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
setwd("/Users/Seth/Documents/Trump/modelOutput/newDocsLogs")
df <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
View(df)
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
fileStrings <- unlist(strsplit(rawdf$groupId, 'TrumpTexts/'))[2]
fileStrings
fileStrings <- unlist(strsplit(rawdf$groupId, 'TrumpTexts/'))
fileStrings
for (i in 1:length(rawdf$groupId)) {
fileStrings[i] <- unlist(strsplit(rawdf$groupId[i], 'TrumpTexts/'))[2]
}
fileStrings
i
unlist(strsplit(rawdf$groupId[i], 'TrumpTexts/'))
unlist(strsplit(rawdf$groupId[i], 'TrumpTexts/'))[2]
fileStrings <- character(length(rawdf$groupId))
for (i in 1:length(rawdf$groupId)) {
fileStrings[i] <- unlist(strsplit(rawdf$groupId[i], 'TrumpTexts/'))[2]
}
fileStrings
fileStrings <- character(length(rawdf$groupId))
dateStrings <- character(length(rawdf$groupId))
typeStrings <- character(length(rawdf$groupId))
for (i in 1:length(rawdf$groupId)) {
string <- unlist(strsplit(rawdf$groupId[i], 'TrumpTexts/'))[2]
# get type
typeStrings[i] <- unlist(strsplit(string, '/raw/'))[1]
# get file and date
fileString <- unlist(strsplit(string, '/raw/'))[2]
#
fileStrings[i] <- unlist(strsplit(fileString, ' - '))[1]
dateStrings[i] <- unlist(strsplit(fileString, ' - '))[2]
}
fileStrings
dateStrings
dateStrings <- gsub(".txt", "", dateStrings)
dateStrings
biglist <- list(typeStrings, fileStrings, dateStrings)
biglist[[1]]
biglist[[2]]
splitGroupId <- function(groupIdVector) {
fileStrings <- character(length(groupIdVector))
dateStrings <- character(length(groupIdVector))
typeStrings <- character(length(groupIdVector))
for (i in 1:length(groupIdVector)) {
string <- unlist(strsplit(groupIdVector[i], 'TrumpTexts/'))[2]
# get type
typeStrings[i] <- unlist(strsplit(string, '/raw/'))[1]
# get file and date
fileString <- unlist(strsplit(string, '/raw/Donald J. Trump: '))[2]
#
fileStrings[i] <- unlist(strsplit(fileString, ' - '))[1]
dateStrings[i] <- unlist(strsplit(fileString, ' - '))[2]
}
# get rid of .txt at the end
dateStrings <- gsub(".txt", "", dateStrings)
# save in a list and return
biglist <- list(typeStrings, fileStrings, dateStrings)
biglist
}
stringList <- splitGroupId(rawdf$groupId)
biglist <- list(typeStrings, fileStrings, dateStrings)
biglist[1]
biglist[2]
stringList[2]
splitGroupId <- function(groupIdVector) {
titleStrings <- character(length(groupIdVector))
dateStrings <- character(length(groupIdVector))
typeStrings <- character(length(groupIdVector))
for (i in 1:length(groupIdVector)) {
string <- unlist(strsplit(groupIdVector[i], 'TrumpTexts/'))[2]
# get type
typeStrings[i] <- unlist(strsplit(string, '/raw/'))[1]
# get file and date
fileString <- unlist(strsplit(string, '/raw/Donald J. Trump: '))[2]
#
titleStrings[i] <- unlist(strsplit(fileString, ' - '))[1]
dateStrings[i] <- unlist(strsplit(fileString, ' - '))[2]
}
# get rid of .txt at the end
dateStrings <- gsub(".txt", "", dateStrings)
# get rid of "by DJT" in the middle of some titles
dateStrings <- gsub("by Donald J. Trump ", "", dateStrings)
# save in a list and return
biglist <- list(typeStrings, titleStrings, dateStrings)
biglist
}
stringList <- splitGroupId(rawdf$groupId)
stringList[2]
splitGroupId <- function(groupIdVector) {
titleStrings <- character(length(groupIdVector))
dateStrings <- character(length(groupIdVector))
typeStrings <- character(length(groupIdVector))
for (i in 1:length(groupIdVector)) {
string <- unlist(strsplit(groupIdVector[i], 'TrumpTexts/'))[2]
# get type
typeStrings[i] <- unlist(strsplit(string, '/raw/'))[1]
# get file and date
fileString <- unlist(strsplit(string, '/raw/Donald J. Trump: '))[2]
#
titleStrings[i] <- unlist(strsplit(fileString, ' - '))[1]
dateStrings[i] <- unlist(strsplit(fileString, ' - '))[2]
}
# get rid of .txt at the end
dateStrings <- gsub(".txt", "", dateStrings)
# get rid of "by DJT" in the middle of some titles
titleStrings <- gsub("by Donald J. Trump ", "", titleStrings)
# save in a list and return
biglist <- list(typeStrings, titleStrings, dateStrings)
biglist
}
stringList <- splitGroupId(rawdf$groupId)
stringList[2]
stringList[[3]]
?as.date
?as.Date
as.Date(stringList[[3]], format = "%B %d, %Y")
rawdf$groupId[73]
rawdf$groupId[72]
?gsub
rawdf$groupId[81]
splitGroupId <- function(groupIdVector) {
titleStrings <- character(length(groupIdVector))
dateStrings <- character(length(groupIdVector))
typeStrings <- character(length(groupIdVector))
for (i in 1:length(groupIdVector)) {
string <- unlist(strsplit(groupIdVector[i], 'TrumpTexts/'))[2]
# get type
typeStrings[i] <- unlist(strsplit(string, '/raw/'))[1]
# get file and date
fileString <- unlist(strsplit(string, '/raw/Donald J. Trump: '))[2]
fileString <- gsub("Press Release - ", "", fileString)
#
titleStrings[i] <- unlist(strsplit(fileString, ' - '))[1]
dateStrings[i] <- unlist(strsplit(fileString, ' - '))[2]
}
# get rid of .txt at the end
dateStrings <- gsub(".txt", "", dateStrings)
# get rid of "by DJT" in the middle of some titles
titleStrings <- gsub("by Donald J. Trump ", "", titleStrings)
# save in a list and return
biglist <- list(typeStrings, titleStrings, dateStrings)
biglist
}
stringList <- splitGroupId(rawdf$groupId)
as.Date(stringList[[3]], format = "%B %d, %Y")
df <- data.frame(type = stringList[[1]],
title = stringList[[2]],
date = as.Date(stringList[[3]], format = "%B %d, %Y"),
rfReg = rawdf$rfPred,
svmReg = rawdf$svmPred,
rfClass = rawdf$rfClassPred,
svmClass = rawdf$svmClassPred)
View(df)
setwd("~/Documents/Trump/Analysis")
Source("/Users/Seth/Documents/Trump/Analysis/trump-cleaning.R")
setwd("/Users/Seth/Documents/Trump/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
df <- cleanTrumpPredictions(rawdf)
source('~/Documents/Trump/Analysis/exploratory1.R', echo=TRUE)
source("/Users/Seth/Documents/Trump/Analysis/trump-cleaning.R")
setwd("/Users/Seth/Documents/Trump/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
df <- cleanTrumpPredictions(rawdf)
View(df)
?reshape
names(df)
moddf <- reshape(df, varying = names(df)[4:7])
moddf <- reshape(df, varying = names(df)[4:7], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], timevar = names(df)[1:3], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], timevar = names(df)[3], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], ids = names(df)[2],idvar = names(df)[3], direction="long")
moddf <- reshape(df, varying = [names(df)[4:7]], ids = names(df)[2],idvar = names(df)[3], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], v.names= "preds" ids = names(df)[2],idvar = names(df)[3], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], v.names= "preds", ids = names(df)[2],idvar = names(df)[3], direction="long")
moddf <- reshape(df, varying = names(df)[4:7], v.names= "preds", ids = names(df)[2],idvar = names(df)[2], direction="long")
View(moddf)
names(df)
moddf <- reshape(df, direction="long", varying=list(names(df)[3:7]), v.names="prediction",
idvar=c("type","title"), timevar="date")#, times=1950:1954)
min(df$date)
max(df$date)
as.Date("2015-06-16")
moddf <- reshape(df, direction="long", varying=list(names(df)[3:7]), v.names="prediction",
idvar=c("type","title"), timevar="date", times=as.Date("2015-06-16"):as.Date("2016-11-09"))
moddf <- reshape(df, direction="long", varying=list(names(df)[3:7]), v.names="prediction",
idvar=c("type","title"), timevar="date", times=df$date)
moddf <- reshape(df, direction="long", varying=list(names(df)[3:7]), v.names="prediction",
idvar=c("type","title"), timevar="date", times=names(df)[3:7])
x2 <- melt(x,id=c("type","title"),variable_name="Pred")
library(reshape2)
x2 <- melt(x,id=c("type","title"),variable_name="Pred")
x2 <- melt(df,id=c("type","title"),variable_name="Pred")
View(x2)
x2 <- melt(df,id=c("date","title"),variable_name="Pred")
View(x2)
x2 <- melt(df,id=c("date","title", "type"),variable_name="Pred")
View(x2)
moddf <- melt(df,id=c("type", "title", "date"), variable_name="Pred")
View(moddf)
str(moddf)
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_point()
library(ggplot2)
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_point()
names(moddf)[4:5] <- c("Model", "Prediction")
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_point()
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_lines()
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf[moddf$type=='TrumpRemarks', ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf[moddf$type=='TrumpStatements', ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf[moddf$type==c('TrumpRemarks', 'TrumpStatements'), ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_line()
#plot remarks
ggplot(moddf[moddf$type==c('TrumpRemarks', 'TrumpStatements'), ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf[moddf$type %in% c('TrumpRemarks', 'TrumpStatements'), ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf, aes(x=date, y=Prediction,colour=Model)) + geom_line()
#plot remarks
ggplot(moddf[moddf$type %in% c('TrumpRemarks', 'TrumpStatements'), ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
ggplot(moddf[moddf$type %in% 'TrumpStatements', ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
levels(moddf$Model)
type(levels(moddf$Model))
class(levels(moddf$Model))
tp <- function(df, type = "both", model = "all") {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
g <- ggplot(moddf[moddf$type %in% type & moddf$Model %in% model, ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
g
}
tp(moddf)
tp(moddf, 'both', 'class')
tp(moddf, 'TrumpRemarks', 'class')
tp <- function(df, type = "both", model = "all", date = 'min') {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
# filter date
if (date == 'min') {
date <- min(df$date)
}
# plot
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=Model)) + geom_line()
g
}
tp(moddf, 'TrumpRemarks', 'class')
tp(moddf, 'TrumpRemarks')
tp(moddf, 'TrumpRemarks', date = '2016-01-01')
tp(moddf, 'TrumpRemarks', 'class','2016-01-01')
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=Model)) + geom_line() + geom_point()
tp <- function(df, type = "both", model = "all", date = 'min') {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
# filter date
if (date == 'min') {
date <- min(df$date)
}
# plot
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=Model)) + geom_line() + geom_point()
g
}
tp(moddf, 'TrumpRemarks', 'class','2016-01-01')
tp <- function(df, type = "both", model = "all", date = 'min') {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
# filter date
if (date == 'min') {
date <- min(df$date)
}
# plot
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=Model)) + geom_point()
g
}
tp(moddf, 'TrumpRemarks', 'class','2016-01-01')
tp <- function(df, type = "both", model = "all", date = 'min') {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
# filter date
if (date == 'min') {
date <- min(df$date)
}
# plot
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=Model)) + geom_line() + geom_point()
g
}
tp(moddf, 'TrumpRemarks', 'class','2016-01-01')
tp(moddf, 'TrumpRemarks', 'class','2016-06-01')
tp <- function(df, type = "both", model = "all", date = 'min') {
# filter remarks vs statements
if (type == 'both') {
type <- c('TrumpRemarks', 'TrumpStatements')
}
# filter models
if (model == 'all') {
model <- levels(moddf$Model)
} else if (model == 'class') {
model <- c('rfClass', 'svmClass')
} else if (model == 'reg') {
model <- c('rfReg', 'svmReg')
}
# filter date
if (date == 'min') {
date <- min(df$date)
}
# plot
g <- ggplot(df[df$type %in% type & df$Model %in% model & df$date >= as.Date(date), ], aes(x=date, y=Prediction,colour=type)) + geom_line() + geom_point()
g
}
tp(moddf, 'TrumpRemarks', 'class','2016-06-01')
tp(moddf, 'both', 'svmClass','2016-06-01')
tp(moddf, 'both', 'svmClass','2016-01-01')
tp(moddf, 'both', 'svmClass','min')
tp(moddf, 'both', 'rfClass','min')
source("/Users/Seth/Documents/Trump/Analysis/trump-plotting.R")
source("/Users/Seth/Documents/Trump/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/Trump/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
library(ggplot2)
library(reshape2)
# load rawdf
setwd("/Users/Seth/Documents/Trump/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
setwd("/Users/Seth/Documents/TrumpDiscourse/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
# get cleaned df
df <- cleanTrumpPredictions(rawdf)
# reshape to plot model comparison
moddf <- melt(df,id=c("type", "title", "date"), variable_name="Pred")
names(moddf)[4:5] <- c("Model", "Prediction")
#plot all
tpt(moddf, 'both', 'rfClass','min')
tpm(moddf)
tpm(moddf, date='2016-04-01')
tpt(moddf, 'both', 'rfClass','min')
tpt(moddf, 'both', 'svmClass','min')
tpt(moddf, 'both', 'rfClass','min')
tpt(moddf, 'both', 'svmClass','min')
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
tpt(moddf, 'both', 'svmClass','min', title = 'SVM Predictions')
tpt(moddf, 'both', 'rfClass','min', title = "Random Forest Predictions")
tpt(moddf, 'both', 'svmClass','min', title = 'SVM Predictions')
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
library(ggplot2)
library(reshape2)
# load rawdf
setwd("/Users/Seth/Documents/TrumpDiscourse/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
# get cleaned df
df <- cleanTrumpPredictions(rawdf)
View(df)
tpm(moddf, date='2016-04-01')
tpm(moddf)
View(df)
write.csv(df, row.names = F)
?write.csv
write.csv(df, "/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-rankings1.csv", row.names = F)
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-cleaning.R")
source("/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-plotting.R")
library(ggplot2)
library(reshape2)
# load rawdf
setwd("/Users/Seth/Documents/TrumpDiscourse/modelOutput/newDocsLogs")
rawdf <- read.csv("newDocsPredictions-coco_3_cv_3_netAng_30_twc_15_tfidfNoPro_pronounFrac_bin_1-H9FJGD.csv", stringsAsFactors = F)
# get cleaned df
df <- cleanTrumpPredictions(rawdf)
write.csv(df, "/Users/Seth/Documents/TrumpDiscourse/Analysis/trump-rankings1.csv", row.names = F)
